import numpy as np
import os 
from skimage.measure import regionprops
from cellpose import models
import csv
import re
import tifffile as tif
from multiprocessing import Pool, cpu_count
import logging

base_dir = "/Users/Albert/Downloads/d1_reimage/"
file_pattern = r'fov_3_MMStack_4-Pos(\d+)_(\d+)\.ome\.tif'
output_file = 'cell_analysis_results.csv'
batch_size = 10  # Adjust based on your system's capabilities

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

def postoindex(x, y):
    if y % 2 == 0:
        return y * 20 + x
    else:
        return (y // 2 + 1) * 40 - x - 1

# Initialize Cellpose model globally
model = models.Cellpose(gpu=False, model_type='cyto')

def segment_cells_cellpose(image):
    masks, _, _, _ = model.eval(image, diameter=None, channels=[2,0])
    return masks

def process_image(args):
    filename, x, y = args
    try:
        logging.info(f"Processing image at position ({x}, {y})")
        
        # Read the image
        with tif.TiffFile(os.path.join(base_dir, filename)) as tif_file:
            image = tif_file.series[0].pages[0].asarray()
        
        # Handle both 2D and 3D arrays
        if image.ndim == 2:
            blue_channel = image  # The image is already a single channel
        elif image.ndim == 3:
            blue_channel = image[0]  # Assuming blue is the first channel
        else:
            raise ValueError(f"Unexpected image dimensions: {image.ndim}")
        
        labels = segment_cells_cellpose(blue_channel)
        
        cell_count = np.max(labels)
        
        labeled_mask = (labels > 0).astype(np.uint8) * labels
        
        cell_sizes = [region.area for region in regionprops(labeled_mask) if region.area >= 50]
        avg_cell_size = np.mean(cell_sizes) if cell_sizes else 0
        
        return {
            'position_x': x,
            'position_y': y,
            'filename': filename,
            'cell_count': cell_count,
            'avg_cell_size': avg_cell_size
        }
    except Exception as e:
        logging.error(f"Error processing {filename}: {str(e)}")
        return None

def file_generator():
    for filename in os.listdir(base_dir):
        if filename.endswith('.ome.tif'):
            match = re.search(file_pattern, filename)
            if match:
                x, y = int(match.group(1)), int(match.group(2))
                yield (filename, x, y)


def process_image_with_index(args):
    index, (filename, x, y) = args
    result = process_image((filename, x, y))
    if result:
        result['index'] = index
    return result

def main():
    fieldnames = ['index', 'position_x', 'position_y', 'filename', 'cell_count', 'avg_cell_size']

    # Collect all file information first
    all_files = list(enumerate(file_generator()))

    with open(output_file, 'w', newline='') as csvfile:
        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
        writer.writeheader()

        # Process all files in one go
        with Pool(processes=cpu_count()) as pool:
            results = pool.map(process_image_with_index, all_files)

        # Write results to CSV
        for result in results:
            if result:
                writer.writerow(result)

    logging.info(f"Analysis complete. Results written to {output_file}")

if __name__ == "__main__":
    main()
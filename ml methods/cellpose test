import matplotlib.pyplot as plt
import matplotlib.patches as mpatches
import tifffile as tif
import numpy as np
import os 
import cv2
from scipy import ndimage as ndi
from skimage.measure import regionprops
from cellpose import models


url = "/Users/albert2/Downloads/d1_reimage/fov_3_MMStack_4-Pos016_013.ome.tif"
tif_stack = tif.imread(url)
# Show image, not needed tehe
# image = np.stack((tif_stack[2], tif_stack[1], tif_stack[0]), axis = -1)
# image = ((image - 181) / 4666.0 * 255).astype(np.uint8)
# plt.imshow(image)
# plt.show()

# 16 13 is 263
# 16 12 is 256
# 16 11 is 223

blueChannel = tif_stack[223][0]
greenChannel = tif_stack[223][1]
redChannel = tif_stack[223][2]
fig, (ax1, ax2, ax3) = plt.subplots(1, 3, figsize=(15, 5))
ax1.imshow(blueChannel, cmap="Blues_r")
ax1.set_title("Blue Channel")
ax2.imshow(greenChannel, cmap="Greens_r")
ax2.set_title("Green Channel")
ax3.imshow(redChannel, cmap="Reds_r")
ax3.set_title("Red Channel")
plt.show()

def segment_cells_cellpose(image):
    # Load the Cellpose model
    model = models.Cellpose(gpu=False, model_type='cyto')

    # Run the model
    masks, _, _, _ = model.eval(image, diameter=None, channels=[0,0])

    return masks

# Apply the segmentation to the blue channel
labels = segment_cells_cellpose(blueChannel)

plt.imshow(labels, cmap='Blues_r')
plt.show()

# Count cells and create masks for other channels
blue_mask = np.zeros_like(blueChannel)
green_mask = np.zeros_like(greenChannel)
red_mask = np.zeros_like(redChannel)

cell_count = np.max(labels)
for label in range(1, cell_count + 1):
    blue_mask[labels == label] = 255
    green_mask[labels == label] = greenChannel[labels == label]
    red_mask[labels == label] = redChannel[labels == label]

# Create a labeled mask
labeled_mask = np.zeros_like(blueChannel, dtype=np.uint8)
for label in range(1, cell_count + 1):
    labeled_mask[labels == label] = label

# Display labeled mask
fig, ax = plt.subplots(figsize=(10, 10))
ax.imshow(labeled_mask, cmap='nipy_spectral')

# Add labels to each cell
for region in regionprops(labeled_mask):
    # Skip small regions
    if region.area < 50:
        continue
    # Draw label at the centroid of each region
    y, x = region.centroid
    ax.text(x, y, str(region.label), fontsize=8, color='white', 
            ha='center', va='center')

ax.set_title(f"Labeled Mask (Total cells: {cell_count})")
plt.show()

# Function to display masks with labels
def display_labeled_mask(mask, title, cmap):
    fig, ax = plt.subplots(figsize=(10, 10))
    ax.imshow(mask, cmap=cmap)
    
    for region in regionprops(labeled_mask):
        if region.area < 50:
            continue
        y, x = region.centroid
        ax.text(x, y, str(region.label), fontsize=8, color='white', 
                ha='center', va='center')
    
    ax.set_title(title)
    plt.show()

print(f"Total number of cells: {cell_count}")

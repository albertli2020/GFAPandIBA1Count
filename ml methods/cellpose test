import matplotlib.pyplot as plt
import matplotlib.patches as mpatches
import tifffile as tif
import numpy as np
import os 
import cv2
from scipy import ndimage as ndi
from skimage.measure import regionprops
from cellpose import models
import csv

url = "/Users/Albert/Downloads/d1_reimage/fov_3_MMStack_4-Pos010_007.ome.tif"
tif_stack = tif.imread(url)


def postoindex(x, y):
    if y % 2 == 0:
        return y * 20 + x
    else:
        return (y // 2 + 1) * 40 - x - 1

blueChannel = tif_stack[263][0]
greenChannel = tif_stack[263][1]
redChannel = tif_stack[263][2]
fig, (ax1, ax2, ax3) = plt.subplots(1, 3, figsize=(15, 5))
ax1.imshow(blueChannel, cmap="Blues_r")
ax1.set_title("Blue Channel")
ax2.imshow(greenChannel, cmap="Greens_r")
ax2.set_title("Green Channel")
ax3.imshow(redChannel, cmap="Reds_r")
ax3.set_title("Red Channel")
plt.show()

def segment_cells_cellpose(image):
    model = models.Cellpose(gpu=False, model_type='cyto')
    masks, _, _, _ = model.eval(image, diameter=None, channels=[0,0])
    return masks

labels = segment_cells_cellpose(blueChannel)

plt.imshow(labels, cmap='Blues_r')
plt.show()

cell_count = np.max(labels)

labeled_mask = np.zeros_like(blueChannel, dtype=np.uint8)
for label in range(1, cell_count + 1):
    labeled_mask[labels == label] = label

fig, ax = plt.subplots(figsize=(10, 10))
ax.imshow(labeled_mask, cmap='nipy_spectral')

for region in regionprops(labeled_mask):
    if region.area < 50:
        continue
    y, x = region.centroid
    ax.text(x, y, str(region.label), fontsize=8, color='white', 
            ha='center', va='center')

ax.set_title(f"Labeled Mask (Total cells: {cell_count})")
plt.show()

def display_labeled_mask(mask, title, cmap):
    fig, ax = plt.subplots(figsize=(10, 10))
    ax.imshow(mask, cmap=cmap)
    
    for region in regionprops(labeled_mask):
        if region.area < 50:
            continue
        y, x = region.centroid
        ax.text(x, y, str(region.label), fontsize=8, color='white', 
                ha='center', va='center')
    
    ax.set_title(title)
    plt.show()

print(f"Total number of cells: {cell_count}")

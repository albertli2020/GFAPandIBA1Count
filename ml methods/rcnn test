import cv2
import numpy as np
import matplotlib.pyplot as plt
from detectron2 import model_zoo
from detectron2.engine import DefaultPredictor
from detectron2.config import get_cfg
import tifffile as tif
from skimage.measure import regionprops


url = "/Users/albert2/Downloads/d1_reimage/fov_3_MMStack_4-Pos016_013.ome.tif"
tif_stack = tif.imread(url)
# Show image, not needed tehe
# image = np.stack((tif_stack[2], tif_stack[1], tif_stack[0]), axis = -1)
# image = ((image - 181) / 4666.0 * 255).astype(np.uint8)
# plt.imshow(image)
# plt.show()

# 16 13 is 263
# 16 12 is 256

blueChannel = tif_stack[256][0]
greenChannel = tif_stack[256][1]
redChannel = tif_stack[256][2]
fig, (ax1, ax2, ax3) = plt.subplots(1, 3, figsize=(15, 5))
ax1.imshow(blueChannel, cmap="Blues_r")
ax1.set_title("Blue Channel")
ax2.imshow(greenChannel, cmap="Greens_r")
ax2.set_title("Green Channel")
ax3.imshow(redChannel, cmap="Reds_r")
ax3.set_title("Red Channel")
plt.show()

def segment_cells_maskrcnn(image):
    # Create config
    cfg = get_cfg()
    cfg.merge_from_file(model_zoo.get_config_file("COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_3x.yaml"))
    cfg.MODEL.ROI_HEADS.SCORE_THRESH_TEST = 0.5  # set threshold for this model
    cfg.MODEL.WEIGHTS = model_zoo.get_checkpoint_url("COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_3x.yaml")

    # Create predictor
    predictor = DefaultPredictor(cfg)

    # Ensure image is in the correct format (8-bit, 3-channel)
    if len(image.shape) == 2:
        image = np.stack((image,)*3, axis=-1)
    image = (image / np.max(image) * 255).astype(np.uint8)

    # Run inference
    outputs = predictor(image)

    # Create a label image
    labels = np.zeros(image.shape[:2], dtype=np.uint16)
    for i, mask in enumerate(outputs["instances"].pred_masks.cpu().numpy()):
        labels[mask] = i + 1

    return labels

# Assuming blueChannel is your input image
labels = segment_cells_maskrcnn(blueChannel)

print(f"Total number of cells: {np.max(labels)}")

# Visualize the results
fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 8))

ax1.imshow(blueChannel, cmap='gray')
ax1.set_title('Original Image')

ax2.imshow(blueChannel, cmap='gray')
ax2.imshow(labels, cmap='jet', alpha=0.5)
ax2.set_title('Mask R-CNN Segmentation')

plt.show()

cell_count = np.max(labels)
labeled_mask = np.zeros_like(blueChannel, dtype=np.uint8)
for label in range(1, cell_count + 1):
    labeled_mask[labels == label] = label

# Display labeled mask
fig, ax = plt.subplots(figsize=(10, 10))
ax.imshow(labeled_mask, cmap='nipy_spectral')

# Add labels to each cell
for region in regionprops(labeled_mask):
    # Skip small regions
    if region.area < 50:
        continue
    # Draw label at the centroid of each region
    y, x = region.centroid
    ax.text(x, y, str(region.label), fontsize=8, color='white', 
            ha='center', va='center')

ax.set_title(f"Labeled Mask (Total cells: {cell_count})")
plt.show()

# Function to display masks with labels
def display_labeled_mask(mask, title, cmap):
    fig, ax = plt.subplots(figsize=(10, 10))
    ax.imshow(mask, cmap=cmap)
    
    for region in regionprops(labeled_mask):
        if region.area < 50:
            continue
        y, x = region.centroid
        ax.text(x, y, str(region.label), fontsize=8, color='white', 
                ha='center', va='center')
    
    ax.set_title(title)
    plt.show()

print(f"Total number of cells: {cell_count}")
